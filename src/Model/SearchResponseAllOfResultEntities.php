<?php
/**
 * SearchResponseAllOfResultEntities
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Qase\APIClientV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Qase\APIClientV1\Model;

use \ArrayAccess;
use \Qase\APIClientV1\ObjectSerializer;

/**
 * SearchResponseAllOfResultEntities Class Doc Comment
 *
 * @category Class
 * @package  Qase\APIClientV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchResponseAllOfResultEntities implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchResponse_allOf_result_entities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'runId' => 'int',
        'planId' => 'int',
        'resultHash' => 'string',
        'requirementId' => 'int',
        'testCaseId' => 'int',
        'defectId' => 'int',
        'id' => 'int',
        'title' => 'string',
        'description' => 'string',
        'status' => 'string',
        'statusText' => 'string',
        'startTime' => '\DateTime',
        'endTime' => '\DateTime',
        'public' => 'bool',
        'stats' => '\Qase\APIClientV1\Model\RunStats',
        'timeSpent' => 'int',
        'environment' => '\Qase\APIClientV1\Model\RunEnvironment',
        'milestone' => '\Qase\APIClientV1\Model\RunMilestone',
        'customFields' => '\Qase\APIClientV1\Model\CustomFieldValue[]',
        'tags' => '\Qase\APIClientV1\Model\TagValue[]',
        'cases' => 'int[]',
        'hash' => 'string',
        'comment' => 'string',
        'stacktrace' => 'string',
        'caseId' => 'int',
        'steps' => '\Qase\APIClientV1\Model\TestStep[]',
        'isApiResult' => 'bool',
        'timeSpentMs' => 'int',
        'attachments' => '\Qase\APIClientV1\Model\Attachment[]',
        'parentId' => 'int',
        'memberId' => 'int',
        'type' => 'int',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'position' => 'int',
        'preconditions' => 'string',
        'postconditions' => 'string',
        'severity' => 'string',
        'priority' => 'int',
        'layer' => 'int',
        'isFlaky' => 'int',
        'behavior' => 'int',
        'automation' => 'int',
        'milestoneId' => 'int',
        'suiteId' => 'int',
        'stepsType' => 'string',
        'params' => '\Qase\APIClientV1\Model\TestCaseParams',
        'authorId' => 'int',
        'actualResult' => 'string',
        'resolved' => '\DateTime',
        'externalData' => 'string',
        'casesCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'runId' => 'int64',
        'planId' => 'int64',
        'resultHash' => null,
        'requirementId' => 'int64',
        'testCaseId' => 'int64',
        'defectId' => 'int64',
        'id' => 'int64',
        'title' => null,
        'description' => null,
        'status' => null,
        'statusText' => null,
        'startTime' => 'date-time',
        'endTime' => 'date-time',
        'public' => null,
        'stats' => null,
        'timeSpent' => 'int64',
        'environment' => null,
        'milestone' => null,
        'customFields' => null,
        'tags' => null,
        'cases' => 'int64',
        'hash' => null,
        'comment' => null,
        'stacktrace' => null,
        'caseId' => 'int64',
        'steps' => null,
        'isApiResult' => null,
        'timeSpentMs' => 'int64',
        'attachments' => null,
        'parentId' => 'int64',
        'memberId' => 'int64',
        'type' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'position' => null,
        'preconditions' => null,
        'postconditions' => null,
        'severity' => null,
        'priority' => null,
        'layer' => null,
        'isFlaky' => null,
        'behavior' => null,
        'automation' => null,
        'milestoneId' => 'int64',
        'suiteId' => 'int64',
        'stepsType' => null,
        'params' => null,
        'authorId' => 'int64',
        'actualResult' => null,
        'resolved' => 'date-time',
        'externalData' => null,
        'casesCount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'runId' => false,
        'planId' => false,
        'resultHash' => false,
        'requirementId' => false,
        'testCaseId' => false,
        'defectId' => false,
        'id' => false,
        'title' => false,
        'description' => true,
        'status' => false,
        'statusText' => false,
        'startTime' => true,
        'endTime' => true,
        'public' => false,
        'stats' => false,
        'timeSpent' => false,
        'environment' => true,
        'milestone' => true,
        'customFields' => false,
        'tags' => false,
        'cases' => false,
        'hash' => false,
        'comment' => true,
        'stacktrace' => true,
        'caseId' => false,
        'steps' => false,
        'isApiResult' => false,
        'timeSpentMs' => false,
        'attachments' => false,
        'parentId' => true,
        'memberId' => false,
        'type' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'position' => false,
        'preconditions' => true,
        'postconditions' => true,
        'severity' => false,
        'priority' => false,
        'layer' => false,
        'isFlaky' => false,
        'behavior' => false,
        'automation' => false,
        'milestoneId' => true,
        'suiteId' => true,
        'stepsType' => true,
        'params' => false,
        'authorId' => false,
        'actualResult' => false,
        'resolved' => true,
        'externalData' => false,
        'casesCount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'runId' => 'run_id',
        'planId' => 'plan_id',
        'resultHash' => 'result_hash',
        'requirementId' => 'requirement_id',
        'testCaseId' => 'test_case_id',
        'defectId' => 'defect_id',
        'id' => 'id',
        'title' => 'title',
        'description' => 'description',
        'status' => 'status',
        'statusText' => 'status_text',
        'startTime' => 'start_time',
        'endTime' => 'end_time',
        'public' => 'public',
        'stats' => 'stats',
        'timeSpent' => 'time_spent',
        'environment' => 'environment',
        'milestone' => 'milestone',
        'customFields' => 'custom_fields',
        'tags' => 'tags',
        'cases' => 'cases',
        'hash' => 'hash',
        'comment' => 'comment',
        'stacktrace' => 'stacktrace',
        'caseId' => 'case_id',
        'steps' => 'steps',
        'isApiResult' => 'is_api_result',
        'timeSpentMs' => 'time_spent_ms',
        'attachments' => 'attachments',
        'parentId' => 'parent_id',
        'memberId' => 'member_id',
        'type' => 'type',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'position' => 'position',
        'preconditions' => 'preconditions',
        'postconditions' => 'postconditions',
        'severity' => 'severity',
        'priority' => 'priority',
        'layer' => 'layer',
        'isFlaky' => 'is_flaky',
        'behavior' => 'behavior',
        'automation' => 'automation',
        'milestoneId' => 'milestone_id',
        'suiteId' => 'suite_id',
        'stepsType' => 'steps_type',
        'params' => 'params',
        'authorId' => 'author_id',
        'actualResult' => 'actual_result',
        'resolved' => 'resolved',
        'externalData' => 'external_data',
        'casesCount' => 'cases_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'runId' => 'setRunId',
        'planId' => 'setPlanId',
        'resultHash' => 'setResultHash',
        'requirementId' => 'setRequirementId',
        'testCaseId' => 'setTestCaseId',
        'defectId' => 'setDefectId',
        'id' => 'setId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'statusText' => 'setStatusText',
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime',
        'public' => 'setPublic',
        'stats' => 'setStats',
        'timeSpent' => 'setTimeSpent',
        'environment' => 'setEnvironment',
        'milestone' => 'setMilestone',
        'customFields' => 'setCustomFields',
        'tags' => 'setTags',
        'cases' => 'setCases',
        'hash' => 'setHash',
        'comment' => 'setComment',
        'stacktrace' => 'setStacktrace',
        'caseId' => 'setCaseId',
        'steps' => 'setSteps',
        'isApiResult' => 'setIsApiResult',
        'timeSpentMs' => 'setTimeSpentMs',
        'attachments' => 'setAttachments',
        'parentId' => 'setParentId',
        'memberId' => 'setMemberId',
        'type' => 'setType',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'position' => 'setPosition',
        'preconditions' => 'setPreconditions',
        'postconditions' => 'setPostconditions',
        'severity' => 'setSeverity',
        'priority' => 'setPriority',
        'layer' => 'setLayer',
        'isFlaky' => 'setIsFlaky',
        'behavior' => 'setBehavior',
        'automation' => 'setAutomation',
        'milestoneId' => 'setMilestoneId',
        'suiteId' => 'setSuiteId',
        'stepsType' => 'setStepsType',
        'params' => 'setParams',
        'authorId' => 'setAuthorId',
        'actualResult' => 'setActualResult',
        'resolved' => 'setResolved',
        'externalData' => 'setExternalData',
        'casesCount' => 'setCasesCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'runId' => 'getRunId',
        'planId' => 'getPlanId',
        'resultHash' => 'getResultHash',
        'requirementId' => 'getRequirementId',
        'testCaseId' => 'getTestCaseId',
        'defectId' => 'getDefectId',
        'id' => 'getId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'statusText' => 'getStatusText',
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime',
        'public' => 'getPublic',
        'stats' => 'getStats',
        'timeSpent' => 'getTimeSpent',
        'environment' => 'getEnvironment',
        'milestone' => 'getMilestone',
        'customFields' => 'getCustomFields',
        'tags' => 'getTags',
        'cases' => 'getCases',
        'hash' => 'getHash',
        'comment' => 'getComment',
        'stacktrace' => 'getStacktrace',
        'caseId' => 'getCaseId',
        'steps' => 'getSteps',
        'isApiResult' => 'getIsApiResult',
        'timeSpentMs' => 'getTimeSpentMs',
        'attachments' => 'getAttachments',
        'parentId' => 'getParentId',
        'memberId' => 'getMemberId',
        'type' => 'getType',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'position' => 'getPosition',
        'preconditions' => 'getPreconditions',
        'postconditions' => 'getPostconditions',
        'severity' => 'getSeverity',
        'priority' => 'getPriority',
        'layer' => 'getLayer',
        'isFlaky' => 'getIsFlaky',
        'behavior' => 'getBehavior',
        'automation' => 'getAutomation',
        'milestoneId' => 'getMilestoneId',
        'suiteId' => 'getSuiteId',
        'stepsType' => 'getStepsType',
        'params' => 'getParams',
        'authorId' => 'getAuthorId',
        'actualResult' => 'getActualResult',
        'resolved' => 'getResolved',
        'externalData' => 'getExternalData',
        'casesCount' => 'getCasesCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('runId', $data ?? [], null);
        $this->setIfExists('planId', $data ?? [], null);
        $this->setIfExists('resultHash', $data ?? [], null);
        $this->setIfExists('requirementId', $data ?? [], null);
        $this->setIfExists('testCaseId', $data ?? [], null);
        $this->setIfExists('defectId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusText', $data ?? [], null);
        $this->setIfExists('startTime', $data ?? [], null);
        $this->setIfExists('endTime', $data ?? [], null);
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('timeSpent', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], null);
        $this->setIfExists('milestone', $data ?? [], null);
        $this->setIfExists('customFields', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('cases', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('stacktrace', $data ?? [], null);
        $this->setIfExists('caseId', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], null);
        $this->setIfExists('isApiResult', $data ?? [], null);
        $this->setIfExists('timeSpentMs', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('parentId', $data ?? [], null);
        $this->setIfExists('memberId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('preconditions', $data ?? [], null);
        $this->setIfExists('postconditions', $data ?? [], null);
        $this->setIfExists('severity', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('layer', $data ?? [], null);
        $this->setIfExists('isFlaky', $data ?? [], null);
        $this->setIfExists('behavior', $data ?? [], null);
        $this->setIfExists('automation', $data ?? [], null);
        $this->setIfExists('milestoneId', $data ?? [], null);
        $this->setIfExists('suiteId', $data ?? [], null);
        $this->setIfExists('stepsType', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
        $this->setIfExists('authorId', $data ?? [], null);
        $this->setIfExists('actualResult', $data ?? [], null);
        $this->setIfExists('resolved', $data ?? [], null);
        $this->setIfExists('externalData', $data ?? [], null);
        $this->setIfExists('casesCount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['runId'] === null) {
            $invalidProperties[] = "'runId' can't be null";
        }
        if ($this->container['planId'] === null) {
            $invalidProperties[] = "'planId' can't be null";
        }
        if ($this->container['resultHash'] === null) {
            $invalidProperties[] = "'resultHash' can't be null";
        }
        if ($this->container['requirementId'] === null) {
            $invalidProperties[] = "'requirementId' can't be null";
        }
        if ($this->container['testCaseId'] === null) {
            $invalidProperties[] = "'testCaseId' can't be null";
        }
        if ($this->container['defectId'] === null) {
            $invalidProperties[] = "'defectId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets runId
     *
     * @return int
     */
    public function getRunId()
    {
        return $this->container['runId'];
    }

    /**
     * Sets runId
     *
     * @param int $runId runId
     *
     * @return self
     */
    public function setRunId($runId)
    {
        if (is_null($runId)) {
            throw new \InvalidArgumentException('non-nullable runId cannot be null');
        }
        $this->container['runId'] = $runId;

        return $this;
    }

    /**
     * Gets planId
     *
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId
     *
     * @param int $planId planId
     *
     * @return self
     */
    public function setPlanId($planId)
    {
        if (is_null($planId)) {
            throw new \InvalidArgumentException('non-nullable planId cannot be null');
        }
        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets resultHash
     *
     * @return string
     */
    public function getResultHash()
    {
        return $this->container['resultHash'];
    }

    /**
     * Sets resultHash
     *
     * @param string $resultHash resultHash
     *
     * @return self
     */
    public function setResultHash($resultHash)
    {
        if (is_null($resultHash)) {
            throw new \InvalidArgumentException('non-nullable resultHash cannot be null');
        }
        $this->container['resultHash'] = $resultHash;

        return $this;
    }

    /**
     * Gets requirementId
     *
     * @return int
     */
    public function getRequirementId()
    {
        return $this->container['requirementId'];
    }

    /**
     * Sets requirementId
     *
     * @param int $requirementId requirementId
     *
     * @return self
     */
    public function setRequirementId($requirementId)
    {
        if (is_null($requirementId)) {
            throw new \InvalidArgumentException('non-nullable requirementId cannot be null');
        }
        $this->container['requirementId'] = $requirementId;

        return $this;
    }

    /**
     * Gets testCaseId
     *
     * @return int
     */
    public function getTestCaseId()
    {
        return $this->container['testCaseId'];
    }

    /**
     * Sets testCaseId
     *
     * @param int $testCaseId testCaseId
     *
     * @return self
     */
    public function setTestCaseId($testCaseId)
    {
        if (is_null($testCaseId)) {
            throw new \InvalidArgumentException('non-nullable testCaseId cannot be null');
        }
        $this->container['testCaseId'] = $testCaseId;

        return $this;
    }

    /**
     * Gets defectId
     *
     * @return int
     */
    public function getDefectId()
    {
        return $this->container['defectId'];
    }

    /**
     * Sets defectId
     *
     * @param int $defectId defectId
     *
     * @return self
     */
    public function setDefectId($defectId)
    {
        if (is_null($defectId)) {
            throw new \InvalidArgumentException('non-nullable defectId cannot be null');
        }
        $this->container['defectId'] = $defectId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusText
     *
     * @return string|null
     */
    public function getStatusText()
    {
        return $this->container['statusText'];
    }

    /**
     * Sets statusText
     *
     * @param string|null $statusText statusText
     *
     * @return self
     */
    public function setStatusText($statusText)
    {
        if (is_null($statusText)) {
            throw new \InvalidArgumentException('non-nullable statusText cannot be null');
        }
        $this->container['statusText'] = $statusText;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime|null $startTime startTime
     *
     * @return self
     */
    public function setStartTime($startTime)
    {
        if (is_null($startTime)) {
            array_push($this->openAPINullablesSetToNull, 'startTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param \DateTime|null $endTime endTime
     *
     * @return self
     */
    public function setEndTime($endTime)
    {
        if (is_null($endTime)) {
            array_push($this->openAPINullablesSetToNull, 'endTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public public
     *
     * @return self
     */
    public function setPublic($public)
    {
        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Qase\APIClientV1\Model\RunStats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Qase\APIClientV1\Model\RunStats|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets timeSpent
     *
     * @return int|null
     */
    public function getTimeSpent()
    {
        return $this->container['timeSpent'];
    }

    /**
     * Sets timeSpent
     *
     * @param int|null $timeSpent Time in ms.
     *
     * @return self
     */
    public function setTimeSpent($timeSpent)
    {
        if (is_null($timeSpent)) {
            throw new \InvalidArgumentException('non-nullable timeSpent cannot be null');
        }
        $this->container['timeSpent'] = $timeSpent;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return \Qase\APIClientV1\Model\RunEnvironment|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param \Qase\APIClientV1\Model\RunEnvironment|null $environment environment
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            array_push($this->openAPINullablesSetToNull, 'environment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('environment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \Qase\APIClientV1\Model\RunMilestone|null
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \Qase\APIClientV1\Model\RunMilestone|null $milestone milestone
     *
     * @return self
     */
    public function setMilestone($milestone)
    {
        if (is_null($milestone)) {
            array_push($this->openAPINullablesSetToNull, 'milestone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \Qase\APIClientV1\Model\CustomFieldValue[]|null
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \Qase\APIClientV1\Model\CustomFieldValue[]|null $customFields customFields
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        if (is_null($customFields)) {
            throw new \InvalidArgumentException('non-nullable customFields cannot be null');
        }
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Qase\APIClientV1\Model\TagValue[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Qase\APIClientV1\Model\TagValue[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets cases
     *
     * @return int[]|null
     */
    public function getCases()
    {
        return $this->container['cases'];
    }

    /**
     * Sets cases
     *
     * @param int[]|null $cases cases
     *
     * @return self
     */
    public function setCases($cases)
    {
        if (is_null($cases)) {
            throw new \InvalidArgumentException('non-nullable cases cannot be null');
        }
        $this->container['cases'] = $cases;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets stacktrace
     *
     * @return string|null
     */
    public function getStacktrace()
    {
        return $this->container['stacktrace'];
    }

    /**
     * Sets stacktrace
     *
     * @param string|null $stacktrace stacktrace
     *
     * @return self
     */
    public function setStacktrace($stacktrace)
    {
        if (is_null($stacktrace)) {
            array_push($this->openAPINullablesSetToNull, 'stacktrace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stacktrace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stacktrace'] = $stacktrace;

        return $this;
    }

    /**
     * Gets caseId
     *
     * @return int|null
     */
    public function getCaseId()
    {
        return $this->container['caseId'];
    }

    /**
     * Sets caseId
     *
     * @param int|null $caseId caseId
     *
     * @return self
     */
    public function setCaseId($caseId)
    {
        if (is_null($caseId)) {
            throw new \InvalidArgumentException('non-nullable caseId cannot be null');
        }
        $this->container['caseId'] = $caseId;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Qase\APIClientV1\Model\TestStep[]|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Qase\APIClientV1\Model\TestStep[]|null $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            throw new \InvalidArgumentException('non-nullable steps cannot be null');
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets isApiResult
     *
     * @return bool|null
     */
    public function getIsApiResult()
    {
        return $this->container['isApiResult'];
    }

    /**
     * Sets isApiResult
     *
     * @param bool|null $isApiResult isApiResult
     *
     * @return self
     */
    public function setIsApiResult($isApiResult)
    {
        if (is_null($isApiResult)) {
            throw new \InvalidArgumentException('non-nullable isApiResult cannot be null');
        }
        $this->container['isApiResult'] = $isApiResult;

        return $this;
    }

    /**
     * Gets timeSpentMs
     *
     * @return int|null
     */
    public function getTimeSpentMs()
    {
        return $this->container['timeSpentMs'];
    }

    /**
     * Sets timeSpentMs
     *
     * @param int|null $timeSpentMs timeSpentMs
     *
     * @return self
     */
    public function setTimeSpentMs($timeSpentMs)
    {
        if (is_null($timeSpentMs)) {
            throw new \InvalidArgumentException('non-nullable timeSpentMs cannot be null');
        }
        $this->container['timeSpentMs'] = $timeSpentMs;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Qase\APIClientV1\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Qase\APIClientV1\Model\Attachment[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int|null $parentId parentId
     *
     * @return self
     */
    public function setParentId($parentId)
    {
        if (is_null($parentId)) {
            array_push($this->openAPINullablesSetToNull, 'parentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets memberId
     *
     * @return int|null
     * @deprecated
     */
    public function getMemberId()
    {
        return $this->container['memberId'];
    }

    /**
     * Sets memberId
     *
     * @param int|null $memberId Deprecated, use `author_id` instead.
     *
     * @return self
     * @deprecated
     */
    public function setMemberId($memberId)
    {
        if (is_null($memberId)) {
            throw new \InvalidArgumentException('non-nullable memberId cannot be null');
        }
        $this->container['memberId'] = $memberId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets preconditions
     *
     * @return string|null
     */
    public function getPreconditions()
    {
        return $this->container['preconditions'];
    }

    /**
     * Sets preconditions
     *
     * @param string|null $preconditions preconditions
     *
     * @return self
     */
    public function setPreconditions($preconditions)
    {
        if (is_null($preconditions)) {
            array_push($this->openAPINullablesSetToNull, 'preconditions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preconditions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preconditions'] = $preconditions;

        return $this;
    }

    /**
     * Gets postconditions
     *
     * @return string|null
     */
    public function getPostconditions()
    {
        return $this->container['postconditions'];
    }

    /**
     * Sets postconditions
     *
     * @param string|null $postconditions postconditions
     *
     * @return self
     */
    public function setPostconditions($postconditions)
    {
        if (is_null($postconditions)) {
            array_push($this->openAPINullablesSetToNull, 'postconditions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postconditions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postconditions'] = $postconditions;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        if (is_null($severity)) {
            throw new \InvalidArgumentException('non-nullable severity cannot be null');
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets layer
     *
     * @return int|null
     */
    public function getLayer()
    {
        return $this->container['layer'];
    }

    /**
     * Sets layer
     *
     * @param int|null $layer layer
     *
     * @return self
     */
    public function setLayer($layer)
    {
        if (is_null($layer)) {
            throw new \InvalidArgumentException('non-nullable layer cannot be null');
        }
        $this->container['layer'] = $layer;

        return $this;
    }

    /**
     * Gets isFlaky
     *
     * @return int|null
     */
    public function getIsFlaky()
    {
        return $this->container['isFlaky'];
    }

    /**
     * Sets isFlaky
     *
     * @param int|null $isFlaky isFlaky
     *
     * @return self
     */
    public function setIsFlaky($isFlaky)
    {
        if (is_null($isFlaky)) {
            throw new \InvalidArgumentException('non-nullable isFlaky cannot be null');
        }
        $this->container['isFlaky'] = $isFlaky;

        return $this;
    }

    /**
     * Gets behavior
     *
     * @return int|null
     */
    public function getBehavior()
    {
        return $this->container['behavior'];
    }

    /**
     * Sets behavior
     *
     * @param int|null $behavior behavior
     *
     * @return self
     */
    public function setBehavior($behavior)
    {
        if (is_null($behavior)) {
            throw new \InvalidArgumentException('non-nullable behavior cannot be null');
        }
        $this->container['behavior'] = $behavior;

        return $this;
    }

    /**
     * Gets automation
     *
     * @return int|null
     */
    public function getAutomation()
    {
        return $this->container['automation'];
    }

    /**
     * Sets automation
     *
     * @param int|null $automation automation
     *
     * @return self
     */
    public function setAutomation($automation)
    {
        if (is_null($automation)) {
            throw new \InvalidArgumentException('non-nullable automation cannot be null');
        }
        $this->container['automation'] = $automation;

        return $this;
    }

    /**
     * Gets milestoneId
     *
     * @return int|null
     */
    public function getMilestoneId()
    {
        return $this->container['milestoneId'];
    }

    /**
     * Sets milestoneId
     *
     * @param int|null $milestoneId milestoneId
     *
     * @return self
     */
    public function setMilestoneId($milestoneId)
    {
        if (is_null($milestoneId)) {
            array_push($this->openAPINullablesSetToNull, 'milestoneId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestoneId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestoneId'] = $milestoneId;

        return $this;
    }

    /**
     * Gets suiteId
     *
     * @return int|null
     */
    public function getSuiteId()
    {
        return $this->container['suiteId'];
    }

    /**
     * Sets suiteId
     *
     * @param int|null $suiteId suiteId
     *
     * @return self
     */
    public function setSuiteId($suiteId)
    {
        if (is_null($suiteId)) {
            array_push($this->openAPINullablesSetToNull, 'suiteId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suiteId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suiteId'] = $suiteId;

        return $this;
    }

    /**
     * Gets stepsType
     *
     * @return string|null
     */
    public function getStepsType()
    {
        return $this->container['stepsType'];
    }

    /**
     * Sets stepsType
     *
     * @param string|null $stepsType stepsType
     *
     * @return self
     */
    public function setStepsType($stepsType)
    {
        if (is_null($stepsType)) {
            array_push($this->openAPINullablesSetToNull, 'stepsType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stepsType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stepsType'] = $stepsType;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \Qase\APIClientV1\Model\TestCaseParams|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \Qase\APIClientV1\Model\TestCaseParams|null $params params
     *
     * @return self
     */
    public function setParams($params)
    {
        if (is_null($params)) {
            throw new \InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets authorId
     *
     * @return int|null
     */
    public function getAuthorId()
    {
        return $this->container['authorId'];
    }

    /**
     * Sets authorId
     *
     * @param int|null $authorId authorId
     *
     * @return self
     */
    public function setAuthorId($authorId)
    {
        if (is_null($authorId)) {
            throw new \InvalidArgumentException('non-nullable authorId cannot be null');
        }
        $this->container['authorId'] = $authorId;

        return $this;
    }

    /**
     * Gets actualResult
     *
     * @return string|null
     */
    public function getActualResult()
    {
        return $this->container['actualResult'];
    }

    /**
     * Sets actualResult
     *
     * @param string|null $actualResult actualResult
     *
     * @return self
     */
    public function setActualResult($actualResult)
    {
        if (is_null($actualResult)) {
            throw new \InvalidArgumentException('non-nullable actualResult cannot be null');
        }
        $this->container['actualResult'] = $actualResult;

        return $this;
    }

    /**
     * Gets resolved
     *
     * @return \DateTime|null
     */
    public function getResolved()
    {
        return $this->container['resolved'];
    }

    /**
     * Sets resolved
     *
     * @param \DateTime|null $resolved resolved
     *
     * @return self
     */
    public function setResolved($resolved)
    {
        if (is_null($resolved)) {
            array_push($this->openAPINullablesSetToNull, 'resolved');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resolved', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resolved'] = $resolved;

        return $this;
    }

    /**
     * Gets externalData
     *
     * @return string|null
     */
    public function getExternalData()
    {
        return $this->container['externalData'];
    }

    /**
     * Sets externalData
     *
     * @param string|null $externalData externalData
     *
     * @return self
     */
    public function setExternalData($externalData)
    {
        if (is_null($externalData)) {
            throw new \InvalidArgumentException('non-nullable externalData cannot be null');
        }
        $this->container['externalData'] = $externalData;

        return $this;
    }

    /**
     * Gets casesCount
     *
     * @return int|null
     */
    public function getCasesCount()
    {
        return $this->container['casesCount'];
    }

    /**
     * Sets casesCount
     *
     * @param int|null $casesCount casesCount
     *
     * @return self
     */
    public function setCasesCount($casesCount)
    {
        if (is_null($casesCount)) {
            throw new \InvalidArgumentException('non-nullable casesCount cannot be null');
        }
        $this->container['casesCount'] = $casesCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


