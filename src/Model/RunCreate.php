<?php
/**
 * RunCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Qase\APIClientV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Qase\APIClientV1\Model;

use \ArrayAccess;
use \Qase\APIClientV1\ObjectSerializer;

/**
 * RunCreate Class Doc Comment
 *
 * @category Class
 * @package  Qase\APIClientV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RunCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RunCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'includeAllCases' => 'bool',
        'cases' => 'int[]',
        'isAutotest' => 'bool',
        'environmentId' => 'int',
        'environmentSlug' => 'string',
        'milestoneId' => 'int',
        'planId' => 'int',
        'authorId' => 'int',
        'tags' => 'string[]',
        'configurations' => 'int[]',
        'customField' => 'array<string,string>',
        'startTime' => 'string',
        'endTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'description' => null,
        'includeAllCases' => null,
        'cases' => 'int64',
        'isAutotest' => null,
        'environmentId' => 'int64',
        'environmentSlug' => null,
        'milestoneId' => 'int64',
        'planId' => 'int64',
        'authorId' => 'int64',
        'tags' => null,
        'configurations' => 'int64',
        'customField' => null,
        'startTime' => null,
        'endTime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
        'description' => false,
        'includeAllCases' => false,
        'cases' => false,
        'isAutotest' => false,
        'environmentId' => false,
        'environmentSlug' => false,
        'milestoneId' => false,
        'planId' => false,
        'authorId' => false,
        'tags' => false,
        'configurations' => false,
        'customField' => false,
        'startTime' => false,
        'endTime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'includeAllCases' => 'include_all_cases',
        'cases' => 'cases',
        'isAutotest' => 'is_autotest',
        'environmentId' => 'environment_id',
        'environmentSlug' => 'environment_slug',
        'milestoneId' => 'milestone_id',
        'planId' => 'plan_id',
        'authorId' => 'author_id',
        'tags' => 'tags',
        'configurations' => 'configurations',
        'customField' => 'custom_field',
        'startTime' => 'start_time',
        'endTime' => 'end_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'includeAllCases' => 'setIncludeAllCases',
        'cases' => 'setCases',
        'isAutotest' => 'setIsAutotest',
        'environmentId' => 'setEnvironmentId',
        'environmentSlug' => 'setEnvironmentSlug',
        'milestoneId' => 'setMilestoneId',
        'planId' => 'setPlanId',
        'authorId' => 'setAuthorId',
        'tags' => 'setTags',
        'configurations' => 'setConfigurations',
        'customField' => 'setCustomField',
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'includeAllCases' => 'getIncludeAllCases',
        'cases' => 'getCases',
        'isAutotest' => 'getIsAutotest',
        'environmentId' => 'getEnvironmentId',
        'environmentSlug' => 'getEnvironmentSlug',
        'milestoneId' => 'getMilestoneId',
        'planId' => 'getPlanId',
        'authorId' => 'getAuthorId',
        'tags' => 'getTags',
        'configurations' => 'getConfigurations',
        'customField' => 'getCustomField',
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('includeAllCases', $data ?? [], null);
        $this->setIfExists('cases', $data ?? [], null);
        $this->setIfExists('isAutotest', $data ?? [], null);
        $this->setIfExists('environmentId', $data ?? [], null);
        $this->setIfExists('environmentSlug', $data ?? [], null);
        $this->setIfExists('milestoneId', $data ?? [], null);
        $this->setIfExists('planId', $data ?? [], null);
        $this->setIfExists('authorId', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('configurations', $data ?? [], null);
        $this->setIfExists('customField', $data ?? [], null);
        $this->setIfExists('startTime', $data ?? [], null);
        $this->setIfExists('endTime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 10000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['environmentId']) && ($this->container['environmentId'] < 1)) {
            $invalidProperties[] = "invalid value for 'environmentId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['environmentSlug']) && (mb_strlen($this->container['environmentSlug']) > 255)) {
            $invalidProperties[] = "invalid value for 'environmentSlug', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['milestoneId']) && ($this->container['milestoneId'] < 1)) {
            $invalidProperties[] = "invalid value for 'milestoneId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['planId']) && ($this->container['planId'] < 1)) {
            $invalidProperties[] = "invalid value for 'planId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['authorId']) && ($this->container['authorId'] < 1)) {
            $invalidProperties[] = "invalid value for 'authorId', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling RunCreate., must be smaller than or equal to 255.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RunCreate., must be smaller than or equal to 10000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets includeAllCases
     *
     * @return bool|null
     */
    public function getIncludeAllCases()
    {
        return $this->container['includeAllCases'];
    }

    /**
     * Sets includeAllCases
     *
     * @param bool|null $includeAllCases includeAllCases
     *
     * @return self
     */
    public function setIncludeAllCases($includeAllCases)
    {
        if (is_null($includeAllCases)) {
            throw new \InvalidArgumentException('non-nullable includeAllCases cannot be null');
        }
        $this->container['includeAllCases'] = $includeAllCases;

        return $this;
    }

    /**
     * Gets cases
     *
     * @return int[]|null
     */
    public function getCases()
    {
        return $this->container['cases'];
    }

    /**
     * Sets cases
     *
     * @param int[]|null $cases cases
     *
     * @return self
     */
    public function setCases($cases)
    {
        if (is_null($cases)) {
            throw new \InvalidArgumentException('non-nullable cases cannot be null');
        }
        $this->container['cases'] = $cases;

        return $this;
    }

    /**
     * Gets isAutotest
     *
     * @return bool|null
     */
    public function getIsAutotest()
    {
        return $this->container['isAutotest'];
    }

    /**
     * Sets isAutotest
     *
     * @param bool|null $isAutotest isAutotest
     *
     * @return self
     */
    public function setIsAutotest($isAutotest)
    {
        if (is_null($isAutotest)) {
            throw new \InvalidArgumentException('non-nullable isAutotest cannot be null');
        }
        $this->container['isAutotest'] = $isAutotest;

        return $this;
    }

    /**
     * Gets environmentId
     *
     * @return int|null
     */
    public function getEnvironmentId()
    {
        return $this->container['environmentId'];
    }

    /**
     * Sets environmentId
     *
     * @param int|null $environmentId environmentId
     *
     * @return self
     */
    public function setEnvironmentId($environmentId)
    {
        if (is_null($environmentId)) {
            throw new \InvalidArgumentException('non-nullable environmentId cannot be null');
        }

        if (($environmentId < 1)) {
            throw new \InvalidArgumentException('invalid value for $environmentId when calling RunCreate., must be bigger than or equal to 1.');
        }

        $this->container['environmentId'] = $environmentId;

        return $this;
    }

    /**
     * Gets environmentSlug
     *
     * @return string|null
     */
    public function getEnvironmentSlug()
    {
        return $this->container['environmentSlug'];
    }

    /**
     * Sets environmentSlug
     *
     * @param string|null $environmentSlug environmentSlug
     *
     * @return self
     */
    public function setEnvironmentSlug($environmentSlug)
    {
        if (is_null($environmentSlug)) {
            throw new \InvalidArgumentException('non-nullable environmentSlug cannot be null');
        }
        if ((mb_strlen($environmentSlug) > 255)) {
            throw new \InvalidArgumentException('invalid length for $environmentSlug when calling RunCreate., must be smaller than or equal to 255.');
        }

        $this->container['environmentSlug'] = $environmentSlug;

        return $this;
    }

    /**
     * Gets milestoneId
     *
     * @return int|null
     */
    public function getMilestoneId()
    {
        return $this->container['milestoneId'];
    }

    /**
     * Sets milestoneId
     *
     * @param int|null $milestoneId milestoneId
     *
     * @return self
     */
    public function setMilestoneId($milestoneId)
    {
        if (is_null($milestoneId)) {
            throw new \InvalidArgumentException('non-nullable milestoneId cannot be null');
        }

        if (($milestoneId < 1)) {
            throw new \InvalidArgumentException('invalid value for $milestoneId when calling RunCreate., must be bigger than or equal to 1.');
        }

        $this->container['milestoneId'] = $milestoneId;

        return $this;
    }

    /**
     * Gets planId
     *
     * @return int|null
     */
    public function getPlanId()
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId
     *
     * @param int|null $planId planId
     *
     * @return self
     */
    public function setPlanId($planId)
    {
        if (is_null($planId)) {
            throw new \InvalidArgumentException('non-nullable planId cannot be null');
        }

        if (($planId < 1)) {
            throw new \InvalidArgumentException('invalid value for $planId when calling RunCreate., must be bigger than or equal to 1.');
        }

        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets authorId
     *
     * @return int|null
     */
    public function getAuthorId()
    {
        return $this->container['authorId'];
    }

    /**
     * Sets authorId
     *
     * @param int|null $authorId authorId
     *
     * @return self
     */
    public function setAuthorId($authorId)
    {
        if (is_null($authorId)) {
            throw new \InvalidArgumentException('non-nullable authorId cannot be null');
        }

        if (($authorId < 1)) {
            throw new \InvalidArgumentException('invalid value for $authorId when calling RunCreate., must be bigger than or equal to 1.');
        }

        $this->container['authorId'] = $authorId;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets configurations
     *
     * @return int[]|null
     */
    public function getConfigurations()
    {
        return $this->container['configurations'];
    }

    /**
     * Sets configurations
     *
     * @param int[]|null $configurations configurations
     *
     * @return self
     */
    public function setConfigurations($configurations)
    {
        if (is_null($configurations)) {
            throw new \InvalidArgumentException('non-nullable configurations cannot be null');
        }
        $this->container['configurations'] = $configurations;

        return $this;
    }

    /**
     * Gets customField
     *
     * @return array<string,string>|null
     */
    public function getCustomField()
    {
        return $this->container['customField'];
    }

    /**
     * Sets customField
     *
     * @param array<string,string>|null $customField A map of custom fields values (id => value)
     *
     * @return self
     */
    public function setCustomField($customField)
    {
        if (is_null($customField)) {
            throw new \InvalidArgumentException('non-nullable customField cannot be null');
        }
        $this->container['customField'] = $customField;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param string|null $startTime startTime
     *
     * @return self
     */
    public function setStartTime($startTime)
    {
        if (is_null($startTime)) {
            throw new \InvalidArgumentException('non-nullable startTime cannot be null');
        }
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param string|null $endTime endTime
     *
     * @return self
     */
    public function setEndTime($endTime)
    {
        if (is_null($endTime)) {
            throw new \InvalidArgumentException('non-nullable endTime cannot be null');
        }
        $this->container['endTime'] = $endTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


