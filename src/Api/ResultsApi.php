<?php
/**
 * ResultsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Qase\APIClientV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Qase\APIClientV1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Qase\APIClientV1\ApiException;
use Qase\APIClientV1\Configuration;
use Qase\APIClientV1\HeaderSelector;
use Qase\APIClientV1\ObjectSerializer;

/**
 * ResultsApi Class Doc Comment
 *
 * @category Class
 * @package  Qase\APIClientV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResultsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createResult' => [
            'application/json',
        ],
        'createResultBulk' => [
            'application/json',
        ],
        'deleteResult' => [
            'application/json',
        ],
        'getResult' => [
            'application/json',
        ],
        'getResults' => [
            'application/json',
        ],
        'updateResult' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createResult
     *
     * Create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultCreate $resultCreate resultCreate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Qase\APIClientV1\Model\ResultCreateResponse
     */
    public function createResult($code, $id, $resultCreate, string $contentType = self::contentTypes['createResult'][0])
    {
        list($response) = $this->createResultWithHttpInfo($code, $id, $resultCreate, $contentType);
        return $response;
    }

    /**
     * Operation createResultWithHttpInfo
     *
     * Create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultCreate $resultCreate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Qase\APIClientV1\Model\ResultCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResultWithHttpInfo($code, $id, $resultCreate, string $contentType = self::contentTypes['createResult'][0])
    {
        $request = $this->createResultRequest($code, $id, $resultCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Qase\APIClientV1\Model\ResultCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Qase\APIClientV1\Model\ResultCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Qase\APIClientV1\Model\ResultCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Qase\APIClientV1\Model\ResultCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qase\APIClientV1\Model\ResultCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createResultAsync
     *
     * Create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultCreate $resultCreate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResultAsync($code, $id, $resultCreate, string $contentType = self::contentTypes['createResult'][0])
    {
        return $this->createResultAsyncWithHttpInfo($code, $id, $resultCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResultAsyncWithHttpInfo
     *
     * Create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultCreate $resultCreate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResultAsyncWithHttpInfo($code, $id, $resultCreate, string $contentType = self::contentTypes['createResult'][0])
    {
        $returnType = '\Qase\APIClientV1\Model\ResultCreateResponse';
        $request = $this->createResultRequest($code, $id, $resultCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createResult'
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultCreate $resultCreate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createResultRequest($code, $id, $resultCreate, string $contentType = self::contentTypes['createResult'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling createResult'
            );
        }
        if (strlen($code) > 10) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.createResult, must be smaller than or equal to 10.');
        }
        if (strlen($code) < 2) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.createResult, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createResult'
            );
        }

        // verify the required parameter 'resultCreate' is set
        if ($resultCreate === null || (is_array($resultCreate) && count($resultCreate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resultCreate when calling createResult'
            );
        }


        $resourcePath = '/result/{code}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resultCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resultCreate));
            } else {
                $httpBody = $resultCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Token');
        if ($apiKey !== null) {
            $headers['Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createResultBulk
     *
     * Bulk create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultcreateBulk $resultcreateBulk resultcreateBulk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResultBulk'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Qase\APIClientV1\Model\BaseResponse
     */
    public function createResultBulk($code, $id, $resultcreateBulk, string $contentType = self::contentTypes['createResultBulk'][0])
    {
        list($response) = $this->createResultBulkWithHttpInfo($code, $id, $resultcreateBulk, $contentType);
        return $response;
    }

    /**
     * Operation createResultBulkWithHttpInfo
     *
     * Bulk create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultcreateBulk $resultcreateBulk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResultBulk'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Qase\APIClientV1\Model\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResultBulkWithHttpInfo($code, $id, $resultcreateBulk, string $contentType = self::contentTypes['createResultBulk'][0])
    {
        $request = $this->createResultBulkRequest($code, $id, $resultcreateBulk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Qase\APIClientV1\Model\BaseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Qase\APIClientV1\Model\BaseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Qase\APIClientV1\Model\BaseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Qase\APIClientV1\Model\BaseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qase\APIClientV1\Model\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createResultBulkAsync
     *
     * Bulk create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultcreateBulk $resultcreateBulk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResultBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResultBulkAsync($code, $id, $resultcreateBulk, string $contentType = self::contentTypes['createResultBulk'][0])
    {
        return $this->createResultBulkAsyncWithHttpInfo($code, $id, $resultcreateBulk, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResultBulkAsyncWithHttpInfo
     *
     * Bulk create test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultcreateBulk $resultcreateBulk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResultBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResultBulkAsyncWithHttpInfo($code, $id, $resultcreateBulk, string $contentType = self::contentTypes['createResultBulk'][0])
    {
        $returnType = '\Qase\APIClientV1\Model\BaseResponse';
        $request = $this->createResultBulkRequest($code, $id, $resultcreateBulk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createResultBulk'
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  \Qase\APIClientV1\Model\ResultcreateBulk $resultcreateBulk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResultBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createResultBulkRequest($code, $id, $resultcreateBulk, string $contentType = self::contentTypes['createResultBulk'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling createResultBulk'
            );
        }
        if (strlen($code) > 10) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.createResultBulk, must be smaller than or equal to 10.');
        }
        if (strlen($code) < 2) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.createResultBulk, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createResultBulk'
            );
        }

        // verify the required parameter 'resultcreateBulk' is set
        if ($resultcreateBulk === null || (is_array($resultcreateBulk) && count($resultcreateBulk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resultcreateBulk when calling createResultBulk'
            );
        }


        $resourcePath = '/result/{code}/{id}/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resultcreateBulk)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resultcreateBulk));
            } else {
                $httpBody = $resultcreateBulk;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Token');
        if ($apiKey !== null) {
            $headers['Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteResult
     *
     * Delete test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Qase\APIClientV1\Model\HashResponse
     */
    public function deleteResult($code, $id, $hash, string $contentType = self::contentTypes['deleteResult'][0])
    {
        list($response) = $this->deleteResultWithHttpInfo($code, $id, $hash, $contentType);
        return $response;
    }

    /**
     * Operation deleteResultWithHttpInfo
     *
     * Delete test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Qase\APIClientV1\Model\HashResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteResultWithHttpInfo($code, $id, $hash, string $contentType = self::contentTypes['deleteResult'][0])
    {
        $request = $this->deleteResultRequest($code, $id, $hash, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Qase\APIClientV1\Model\HashResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Qase\APIClientV1\Model\HashResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Qase\APIClientV1\Model\HashResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Qase\APIClientV1\Model\HashResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qase\APIClientV1\Model\HashResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteResultAsync
     *
     * Delete test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResultAsync($code, $id, $hash, string $contentType = self::contentTypes['deleteResult'][0])
    {
        return $this->deleteResultAsyncWithHttpInfo($code, $id, $hash, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteResultAsyncWithHttpInfo
     *
     * Delete test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResultAsyncWithHttpInfo($code, $id, $hash, string $contentType = self::contentTypes['deleteResult'][0])
    {
        $returnType = '\Qase\APIClientV1\Model\HashResponse';
        $request = $this->deleteResultRequest($code, $id, $hash, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteResult'
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteResultRequest($code, $id, $hash, string $contentType = self::contentTypes['deleteResult'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling deleteResult'
            );
        }
        if (strlen($code) > 10) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.deleteResult, must be smaller than or equal to 10.');
        }
        if (strlen($code) < 2) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.deleteResult, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteResult'
            );
        }

        // verify the required parameter 'hash' is set
        if ($hash === null || (is_array($hash) && count($hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hash when calling deleteResult'
            );
        }


        $resourcePath = '/result/{code}/{id}/{hash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                '{' . 'hash' . '}',
                ObjectSerializer::toPathValue($hash),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Token');
        if ($apiKey !== null) {
            $headers['Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResult
     *
     * Get test run result by code
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Qase\APIClientV1\Model\ResultResponse
     */
    public function getResult($code, $hash, string $contentType = self::contentTypes['getResult'][0])
    {
        list($response) = $this->getResultWithHttpInfo($code, $hash, $contentType);
        return $response;
    }

    /**
     * Operation getResultWithHttpInfo
     *
     * Get test run result by code
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Qase\APIClientV1\Model\ResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResultWithHttpInfo($code, $hash, string $contentType = self::contentTypes['getResult'][0])
    {
        $request = $this->getResultRequest($code, $hash, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Qase\APIClientV1\Model\ResultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Qase\APIClientV1\Model\ResultResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Qase\APIClientV1\Model\ResultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Qase\APIClientV1\Model\ResultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qase\APIClientV1\Model\ResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResultAsync
     *
     * Get test run result by code
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultAsync($code, $hash, string $contentType = self::contentTypes['getResult'][0])
    {
        return $this->getResultAsyncWithHttpInfo($code, $hash, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResultAsyncWithHttpInfo
     *
     * Get test run result by code
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultAsyncWithHttpInfo($code, $hash, string $contentType = self::contentTypes['getResult'][0])
    {
        $returnType = '\Qase\APIClientV1\Model\ResultResponse';
        $request = $this->getResultRequest($code, $hash, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResult'
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $hash Hash. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResultRequest($code, $hash, string $contentType = self::contentTypes['getResult'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getResult'
            );
        }
        if (strlen($code) > 10) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.getResult, must be smaller than or equal to 10.');
        }
        if (strlen($code) < 2) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.getResult, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'hash' is set
        if ($hash === null || (is_array($hash) && count($hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hash when calling getResult'
            );
        }


        $resourcePath = '/result/{code}/{hash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                '{' . 'hash' . '}',
                ObjectSerializer::toPathValue($hash),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Token');
        if ($apiKey !== null) {
            $headers['Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResults
     *
     * Get all test run results
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $status A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid. (optional)
     * @param  string $run A list of run IDs separated by comma. (optional)
     * @param  string $caseId A list of case IDs separated by comma. (optional)
     * @param  string $member A list of member IDs separated by comma. (optional)
     * @param  bool $api api (optional)
     * @param  string $fromEndTime Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  string $toEndTime Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  int $limit A number of entities in result set. (optional, default to 10)
     * @param  int $offset How many entities should be skipped. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Qase\APIClientV1\Model\ResultListResponse
     */
    public function getResults($code, $status = null, $run = null, $caseId = null, $member = null, $api = null, $fromEndTime = null, $toEndTime = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getResults'][0])
    {
        list($response) = $this->getResultsWithHttpInfo($code, $status, $run, $caseId, $member, $api, $fromEndTime, $toEndTime, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getResultsWithHttpInfo
     *
     * Get all test run results
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $status A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid. (optional)
     * @param  string $run A list of run IDs separated by comma. (optional)
     * @param  string $caseId A list of case IDs separated by comma. (optional)
     * @param  string $member A list of member IDs separated by comma. (optional)
     * @param  bool $api (optional)
     * @param  string $fromEndTime Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  string $toEndTime Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  int $limit A number of entities in result set. (optional, default to 10)
     * @param  int $offset How many entities should be skipped. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Qase\APIClientV1\Model\ResultListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResultsWithHttpInfo($code, $status = null, $run = null, $caseId = null, $member = null, $api = null, $fromEndTime = null, $toEndTime = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getResults'][0])
    {
        $request = $this->getResultsRequest($code, $status, $run, $caseId, $member, $api, $fromEndTime, $toEndTime, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Qase\APIClientV1\Model\ResultListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Qase\APIClientV1\Model\ResultListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Qase\APIClientV1\Model\ResultListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Qase\APIClientV1\Model\ResultListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qase\APIClientV1\Model\ResultListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResultsAsync
     *
     * Get all test run results
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $status A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid. (optional)
     * @param  string $run A list of run IDs separated by comma. (optional)
     * @param  string $caseId A list of case IDs separated by comma. (optional)
     * @param  string $member A list of member IDs separated by comma. (optional)
     * @param  bool $api (optional)
     * @param  string $fromEndTime Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  string $toEndTime Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  int $limit A number of entities in result set. (optional, default to 10)
     * @param  int $offset How many entities should be skipped. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultsAsync($code, $status = null, $run = null, $caseId = null, $member = null, $api = null, $fromEndTime = null, $toEndTime = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getResults'][0])
    {
        return $this->getResultsAsyncWithHttpInfo($code, $status, $run, $caseId, $member, $api, $fromEndTime, $toEndTime, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResultsAsyncWithHttpInfo
     *
     * Get all test run results
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $status A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid. (optional)
     * @param  string $run A list of run IDs separated by comma. (optional)
     * @param  string $caseId A list of case IDs separated by comma. (optional)
     * @param  string $member A list of member IDs separated by comma. (optional)
     * @param  bool $api (optional)
     * @param  string $fromEndTime Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  string $toEndTime Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  int $limit A number of entities in result set. (optional, default to 10)
     * @param  int $offset How many entities should be skipped. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultsAsyncWithHttpInfo($code, $status = null, $run = null, $caseId = null, $member = null, $api = null, $fromEndTime = null, $toEndTime = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getResults'][0])
    {
        $returnType = '\Qase\APIClientV1\Model\ResultListResponse';
        $request = $this->getResultsRequest($code, $status, $run, $caseId, $member, $api, $fromEndTime, $toEndTime, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResults'
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  string $status A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid. (optional)
     * @param  string $run A list of run IDs separated by comma. (optional)
     * @param  string $caseId A list of case IDs separated by comma. (optional)
     * @param  string $member A list of member IDs separated by comma. (optional)
     * @param  bool $api (optional)
     * @param  string $fromEndTime Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  string $toEndTime Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;. (optional)
     * @param  int $limit A number of entities in result set. (optional, default to 10)
     * @param  int $offset How many entities should be skipped. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResultsRequest($code, $status = null, $run = null, $caseId = null, $member = null, $api = null, $fromEndTime = null, $toEndTime = null, $limit = 10, $offset = 0, string $contentType = self::contentTypes['getResults'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getResults'
            );
        }
        if (strlen($code) > 10) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.getResults, must be smaller than or equal to 10.');
        }
        if (strlen($code) < 2) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.getResults, must be bigger than or equal to 2.');
        }
        







        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ResultsApi.getResults, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ResultsApi.getResults, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset > 100000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ResultsApi.getResults, must be smaller than or equal to 100000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ResultsApi.getResults, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/result/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $run,
            'run', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caseId,
            'case_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $member,
            'member', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api,
            'api', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromEndTime,
            'from_end_time', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toEndTime,
            'to_end_time', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Token');
        if ($apiKey !== null) {
            $headers['Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateResult
     *
     * Update test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  \Qase\APIClientV1\Model\ResultUpdate $resultUpdate resultUpdate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Qase\APIClientV1\Model\HashResponse
     */
    public function updateResult($code, $id, $hash, $resultUpdate, string $contentType = self::contentTypes['updateResult'][0])
    {
        list($response) = $this->updateResultWithHttpInfo($code, $id, $hash, $resultUpdate, $contentType);
        return $response;
    }

    /**
     * Operation updateResultWithHttpInfo
     *
     * Update test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  \Qase\APIClientV1\Model\ResultUpdate $resultUpdate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateResult'] to see the possible values for this operation
     *
     * @throws \Qase\APIClientV1\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Qase\APIClientV1\Model\HashResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateResultWithHttpInfo($code, $id, $hash, $resultUpdate, string $contentType = self::contentTypes['updateResult'][0])
    {
        $request = $this->updateResultRequest($code, $id, $hash, $resultUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Qase\APIClientV1\Model\HashResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Qase\APIClientV1\Model\HashResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Qase\APIClientV1\Model\HashResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Qase\APIClientV1\Model\HashResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qase\APIClientV1\Model\HashResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateResultAsync
     *
     * Update test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  \Qase\APIClientV1\Model\ResultUpdate $resultUpdate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateResultAsync($code, $id, $hash, $resultUpdate, string $contentType = self::contentTypes['updateResult'][0])
    {
        return $this->updateResultAsyncWithHttpInfo($code, $id, $hash, $resultUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateResultAsyncWithHttpInfo
     *
     * Update test run result
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  \Qase\APIClientV1\Model\ResultUpdate $resultUpdate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateResultAsyncWithHttpInfo($code, $id, $hash, $resultUpdate, string $contentType = self::contentTypes['updateResult'][0])
    {
        $returnType = '\Qase\APIClientV1\Model\HashResponse';
        $request = $this->updateResultRequest($code, $id, $hash, $resultUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateResult'
     *
     * @param  string $code Code of project, where to search entities. (required)
     * @param  int $id Identifier. (required)
     * @param  string $hash Hash. (required)
     * @param  \Qase\APIClientV1\Model\ResultUpdate $resultUpdate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateResultRequest($code, $id, $hash, $resultUpdate, string $contentType = self::contentTypes['updateResult'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling updateResult'
            );
        }
        if (strlen($code) > 10) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.updateResult, must be smaller than or equal to 10.');
        }
        if (strlen($code) < 2) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ResultsApi.updateResult, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateResult'
            );
        }

        // verify the required parameter 'hash' is set
        if ($hash === null || (is_array($hash) && count($hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hash when calling updateResult'
            );
        }

        // verify the required parameter 'resultUpdate' is set
        if ($resultUpdate === null || (is_array($resultUpdate) && count($resultUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resultUpdate when calling updateResult'
            );
        }


        $resourcePath = '/result/{code}/{id}/{hash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                '{' . 'hash' . '}',
                ObjectSerializer::toPathValue($hash),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resultUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resultUpdate));
            } else {
                $httpBody = $resultUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Token');
        if ($apiKey !== null) {
            $headers['Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
